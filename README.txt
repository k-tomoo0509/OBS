<ゲーム概要>
OBS ~Online Battle Shooting~は、ローカルサーバーを使ってできる簡単なオンラインシューティングゲームです。
このゲームの目的は、如何に長く生き残るかを競うものになっています。

<実行方法>
まず初めにserver.pdeを実行し、ローカルサーバーを立ち上げる。
次に、client.pdeを実行すると、サーバーとの接続後、ゲーム画面が立ち上がる。

<操作方法>
常に自機はいずれかの方向に移動している。
左、右矢印キー:左、右に方向転換をする。
Ctrlキー:弾の発射する。
Shiftキー:押してる間、自機の移動速度を上げる。
Sキー:ゲージが溜まっている際に、ゲージを消費し、自機を中心に円運動する弾を発射する。
Aキー:ゲージが溜まっている際に、ゲージを消費し、自機のHPを1回復する。

<それぞれのプログラムの中身について>

server.pde:
    グローバル変数:
        n:機体が連続で打てる球の上限数を指定しているint型変数

    Playerクラス:
        変数:
            id,lv,shotLv,HPLv,GageLv:機体のIDと性能などのレベルに関してを格納しているint型変数
            cx,cy,angle,step:機体の座標と向いてる方向を決めるための角度と機体の移動速度を格納しているfloat型変数
            cBx,xBy,cBt:機体を中心に円運動する弾の座標とその角速度を格納しているfloat型変数
            shots:機体がどの弾を発射しているか判断するためのboolean型配列
            sx,sy,sAngle:それぞれの弾の座標と向かう方向を決めるための角度を格納しているfloat型配列
            heal:回復する操作を行ったかどうかを判断するためのboolean型変数
            cB:機体を中心に円運動する弾を出力させるかどうかを判断するためのboolean型変数
            hp:機体の体力を格納しているint型変数
            GageTime:機体のゲージに関しての描写を制御するための時間を格納しているint型変数
            cBtime:機体を中心に円運動する弾の出現時間を図るための値を格納しているint型変数
            size:弾の大きさを格納しているint型変数

        Player():
            クライアントとの最初の通信が行われた際に、機体の初期情報をセッティングするためのコンストラクタ

        forward():
            機体が画面外に移動する際に、出た方向の画面と逆側から出現させるための関数

        shot():
            発射されている弾の添え字を引数に、その球の座標と方角を取得するための関数

        sStepAndHit():
            弾の速さを引数に、弾の動きの実装と、弾が画面外に移動したのか、もしくは別の機体に当たったのか、またその際に敵機のHPを0にしたならば、自機のLvを上げるなどの判断をするための関数

        Heal():
            機体のHPが上限に達していない場合、機体のHPを回復させる処理を行うための関数

        circleBall():
            機体を中心に円運動する弾に関する情報を設定するための関数

        cBHit():
            機体を中心に円運動する弾が他の機体に当たったかどうか、またその際に敵機のHPを0にしたならば、自機のLvを上げるなどを判断することと、弾の出現時間が10秒経過した際に、弾の出力を停止させるための変数

        levelUp():
            敵機のHPを0にした際に、自機の各性能のいずれか一つをランダムにLvを上げるための関数

        addTime():
            GageLvによって、Gageの溜まる速度を変更するための関数

        Hitjudge():
            発射されている弾の座標と機体の座標を引数に、弾が機体に当たったかどうかの判定結果を返り値として返す関数

        judge():
            機体の各線分と弾の座標を引数に、弾の座標が機体の内部にあるかどうかの判定結果を返り値として返す関数

        stopConnect():
            機体のHPが0になっているかどうかの判定結果を返り値として返す関数



    draw():
        機体の情報に関しての確認と更新をして、機体のHPが0になっているものがあった場合、サーバーとの接続を切るための関数

    clientEvent():
        通信しているクライアントを引数に、クライアントから送信されたJSONオブジェクトを読み込み、指定された操作を行うための関数

    serverEvent():
        サーバーとクライアントが初めて接続された際の、機体の初期情報を設定させて、新しいプレイヤーとしてサーバーでその情報を格納するための関数

    disconnectEvent():
        サーバーとの通信が切れたクライアントの情報を削除するための関数

    playerInfo():
        機体の情報をJSONオブジェクトに格納して、そのJSONオブジェクトを返り値としてクライアントに送信するための関数




client.pde:

    グローバル変数:
        n:サーバー側で設定されている機体が連続で打てる球の上限数を格納しているint型変数
        playId:自機のIDを保管しているint型変数
        buf:サーバーとの再接続をする際に、新規IDを取得するためのint型変数
        playIdcount:プログラム実行時に自機のIDを取得するためのint型変数
        shotCount:機体が弾を打った数を保管するためのint型変数
        gage:自機のゲージが溜まっているかどうかを判断するためのboolean型変数
        bg1,bg2:背景の色に関してのcolor型変数

    Playerクラス:
        変数:
            id,lv,shotLv,HPLv,GageLv:機体のIDと性能などのレベルに関してを格納しているint型変数
            cx,cy,angle,cBt:機体の座標と向いてる方向を決めるための角度と、機体を中心に円運動する弾の角度を格納するためのfloat型変数
            shots:機体が弾を発射しているか判断するためのboolean型配列
            sx,sy:弾の座標を格納するためのfloat型配列
            hp:機体の体力を格納するためのint型変数
            cB:機体を中心に円運動する弾を出力させるかどうかを判断するためのboolean型変数
            GageTime:機体のゲージに関しての描写を制御するためのint型変数

        Player():
            JSONオブジェクトから得た機体の基本情報をセッティングするためのコンストラクタ

        draw():
            機体を画面に描くための関数

        countId():
            サーバーとの再接続する際に、新たな自機のIDをbufから取得するための関数

        judgeMyId():
            現在読み込まれている情報が自機のものか他プレイヤーのものかどうか判断し、自機であった場合、その情報を画面内に出力させるための関数

        shotting():
            機体が弾を発射している際の描写のための関数

        circleBall():
            呼び出し元の機体の座標を引数に、自機の性能ごとに弾の数を変化させながら、中心に円運動する球を出力させるための関数

    draw():
        背景に関しての出力と、サーバーとの接続が切れているかどうかの判断をし、切れていない場合ｍPlayerクラスに関して排他制御をして、現在使われている中で最も新しいIDをbufに代入させて、クラスPlayer内のdraw関数を呼び出すための関数
    
    keyPressed():
        特定のキーボードが押されている際に呼び出され、JSONオブジェクトを使い、キーボードの入力による特定の操作に関しての命令を文字列にしたものを格納して出来たJSONオブジェクトをサーバーに送信するための関数

    keyReleased():
        特定のキーボードから指が離れた際に呼び出され、JSONオブジェクトを使い、キーボードから指が離れた際に行う特定の操作に関しての命令を文字列にしたものを格納して出来たJSONオブジェクトをサーバーに送信するための関数

    clientEvent():
        サーバーから受信した機体の情報を取得して、得た情報をPlayerクラスに与えるための関数


